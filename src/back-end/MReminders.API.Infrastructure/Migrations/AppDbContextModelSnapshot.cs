// <auto-generated />
using System;
using MReminders.API.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MReminders.API.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MReminders.API.Domain.Entities.Attachment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReminderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ReminderId", "FileName")
                        .IsUnique();

                    b.ToTable("Attachments");

                    b.HasData(
                        new
                        {
                            Id = "7390b5e4-ab20-4a05-adf1-a1ade898052d",
                            Content = new byte[0],
                            ContentType = "text/x-powershell",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FileName = "BackupAutomationScript.ps1",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReminderId = "a6a2cdac-72c5-4447-aef0-6fc29cb42e95"
                        },
                        new
                        {
                            Id = "fb6a88c0-5f7f-4782-acec-bd2c2e7a584b",
                            Content = new byte[0],
                            ContentType = "application/pdf",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FileName = "GroceryList.pdf",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReminderId = "bbee338d-1dc6-4309-a859-e34b5236256d"
                        });
                });

            modelBuilder.Entity("MReminders.API.Domain.Entities.Reminder", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Done")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Repeat")
                        .HasColumnType("bit");

                    b.Property<string>("Repetition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Name")
                        .IsUnique();

                    b.ToTable("Reminders");

                    b.HasData(
                        new
                        {
                            Id = "a6a2cdac-72c5-4447-aef0-6fc29cb42e95",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Perform daily backup",
                            Done = false,
                            DueDate = new DateTime(2025, 1, 26, 10, 52, 52, 241, DateTimeKind.Utc).AddTicks(4316),
                            Location = "",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Daily Backup",
                            Repeat = false,
                            Repetition = "Daily",
                            UserId = "44881cc2-d9a2-4d8f-a9d5-07470eb66d52"
                        },
                        new
                        {
                            Id = "5019de8a-dc3c-4699-8410-ec54b4c6a15d",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Participate in weekly meeting",
                            Done = false,
                            DueDate = new DateTime(2025, 2, 1, 10, 52, 52, 241, DateTimeKind.Utc).AddTicks(4862),
                            Location = "",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Weekly Meeting",
                            Repeat = false,
                            Repetition = "Weekly",
                            UserId = "3b395038-e46a-4c82-b4b8-ae2152c841fa"
                        },
                        new
                        {
                            Id = "bbee338d-1dc6-4309-a859-e34b5236256d",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Buy groceries for the week",
                            Done = false,
                            DueDate = new DateTime(2025, 1, 28, 10, 52, 52, 241, DateTimeKind.Utc).AddTicks(4874),
                            Location = "",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Grocery Shopping",
                            Repeat = false,
                            Repetition = "None",
                            UserId = "0cf41d61-d061-4c1e-8352-5cb789713453"
                        },
                        new
                        {
                            Id = "4e9957d7-499d-42f9-a513-15e15767965e",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Pay electricity and water bills",
                            Done = false,
                            DueDate = new DateTime(2025, 1, 30, 10, 52, 52, 241, DateTimeKind.Utc).AddTicks(4883),
                            Location = "",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pay Utility Bills",
                            Repeat = false,
                            Repetition = "Monthly",
                            UserId = "0cf41d61-d061-4c1e-8352-5cb789713453"
                        },
                        new
                        {
                            Id = "937a8fa6-c14b-4e17-a4cc-16aee9f7b322",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Have lunch with the team",
                            Done = false,
                            DueDate = new DateTime(2025, 2, 8, 10, 52, 52, 241, DateTimeKind.Utc).AddTicks(4899),
                            Location = "",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Team Lunch",
                            Repeat = false,
                            Repetition = "None",
                            UserId = "3b395038-e46a-4c82-b4b8-ae2152c841fa"
                        });
                });

            modelBuilder.Entity("MReminders.API.Domain.Identity.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e4e9c144-6f83-4462-9a42-e35b15f97ed4",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "11526a74-0cd1-4185-b7b2-0113262784e2",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "user",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("MReminders.API.Domain.Identity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasFilter("[PhoneNumber] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "44881cc2-d9a2-4d8f-a9d5-07470eb66d52",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a59a511b-e2a1-4856-af02-d8d4f765312d",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sysadmin@example.com",
                            EmailConfirmed = false,
                            FullName = "System Administrator",
                            LockoutEnabled = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NormalizedEmail = "SYSADMIN@EXAMPLE.COM",
                            NormalizedUserName = "SYSADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEC0ltfgiUZ6fw+rHJfOyWUiUqXPCCPNlgy/9tqEB3k1r2BY0QYl7WHU2U3JT2LSXhA==",
                            PhoneNumber = "+5512987654321",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1a6dd7a0-820c-47f2-8f68-e962c34f8028",
                            TwoFactorEnabled = false,
                            UserName = "sysadmin"
                        },
                        new
                        {
                            Id = "3b395038-e46a-4c82-b4b8-ae2152c841fa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "207dbef8-b245-4090-8d49-139263e7e717",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "alice@example.com",
                            EmailConfirmed = false,
                            FullName = "Alice User",
                            LockoutEnabled = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NormalizedEmail = "ALICE@EXAMPLE.COM",
                            NormalizedUserName = "ALICE",
                            PasswordHash = "AQAAAAIAAYagAAAAEOCy08ywFxE5h0XUvD5z6SlNuqapSTHL+/MgNJMqA1vVmneYzSwaEpaw3HaaG2AvLA==",
                            PhoneNumber = "+5512987654322",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "16cc021e-7239-4bd4-8f91-e58ae6632809",
                            TwoFactorEnabled = false,
                            UserName = "alice"
                        },
                        new
                        {
                            Id = "0cf41d61-d061-4c1e-8352-5cb789713453",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "10486489-a2ea-4772-8ceb-5250afe0e074",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bob@example.com",
                            EmailConfirmed = false,
                            FullName = "Bob User",
                            LockoutEnabled = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NormalizedEmail = "BOB@EXAMPLE.COM",
                            NormalizedUserName = "BOB",
                            PasswordHash = "AQAAAAIAAYagAAAAEEsJvEz83LWgXVYQYZVpJPn38bgFgh7rGVnyBLJgEeP31LUxcUHQcC8v2E6et5sN/Q==",
                            PhoneNumber = "+5512987654323",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "86f618d6-9634-4018-a387-acdc6a08b378",
                            TwoFactorEnabled = false,
                            UserName = "bob"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "44881cc2-d9a2-4d8f-a9d5-07470eb66d52",
                            RoleId = "e4e9c144-6f83-4462-9a42-e35b15f97ed4"
                        },
                        new
                        {
                            UserId = "3b395038-e46a-4c82-b4b8-ae2152c841fa",
                            RoleId = "11526a74-0cd1-4185-b7b2-0113262784e2"
                        },
                        new
                        {
                            UserId = "0cf41d61-d061-4c1e-8352-5cb789713453",
                            RoleId = "11526a74-0cd1-4185-b7b2-0113262784e2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MReminders.API.Domain.Entities.Attachment", b =>
                {
                    b.HasOne("MReminders.API.Domain.Entities.Reminder", "Reminder")
                        .WithMany("Attachments")
                        .HasForeignKey("ReminderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reminder");
                });

            modelBuilder.Entity("MReminders.API.Domain.Entities.Reminder", b =>
                {
                    b.HasOne("MReminders.API.Domain.Identity.AppUser", "User")
                        .WithMany("Reminders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MReminders.API.Domain.Identity.AppRole", b =>
                {
                    b.HasOne("MReminders.API.Domain.Identity.AppUser", null)
                        .WithMany("Roles")
                        .HasForeignKey("AppUserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("MReminders.API.Domain.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MReminders.API.Domain.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MReminders.API.Domain.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("MReminders.API.Domain.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MReminders.API.Domain.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MReminders.API.Domain.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MReminders.API.Domain.Entities.Reminder", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("MReminders.API.Domain.Identity.AppUser", b =>
                {
                    b.Navigation("Reminders");

                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
